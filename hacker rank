Sub array
A subarray of array a of length n is a contiguous segment a[i] from  through a[j] where 0<i<j<n.
The sum of an array is the sum of its elements.
Given an  element array of integers,a, and an integer,m, determine the maximum value of the sum of any of its subarrays modulo m.

Example


The following table lists all subarrays and their moduli:

		sum	%2
[1]		1	1
[2]		2	0
[3]		3	1
[1,2]		3	1
[2,3]		5	1
[1,2,3]		6	0
The maximum modulus is .

Function Description

Complete the maximumSum function in the editor below.

maximumSum has the following parameter(s):

long a[n]: the array to analyze
long m: the modulo divisor
Returns
- long: the maximum (subarray sum modulo )

Input Format

The first line contains an integer q, the number of queries to perform.

The next q pairs of lines are as follows:

The first line contains two space-separated integers n and (long)m, the length  of a and the modulo divisor.
The second line contains  space-separated long integers .

 
Sample Input

STDIN       Function
-----       --------
1           q = 1
5 7         a[] size n = 5, m = 7
3 3 9 9 5
Sample Output

6
Explanation

The subarrays of array a = [3 3 9 9 5] and their respective sums modulo m=7 

sol

#include <stdio.h>
#include <limits.h>

// Function to calculate maximum of two integers
long max(long a, long b) {
    return (a > b) ? a : b;
}

// Function to find maximum subarray sum modulo m
long maximumSum(int n, long a[], long m) {
    long max_sum_mod = 0;
    long prefix_sum = 0;
    long prefix_set[1000000]; // Assuming a large enough size for the prefix set
    int prefix_count = 0;

    for (int i = 0; i < n; i++) {
        prefix_sum = (prefix_sum + a[i]) % m;
        max_sum_mod = max(max_sum_mod, prefix_sum);

        // Store prefix_sum in the prefix_set array
        prefix_set[prefix_count++] = prefix_sum;

        // Find the smallest prefix sum greater than current prefix_sum % m
        long smallest_greater = LONG_MAX;
        for (int j = 0; j < prefix_count - 1; j++) {
            if (prefix_set[j] > prefix_sum) {
                smallest_greater = prefix_set[j];
                break;
            }
        }

        if (smallest_greater != LONG_MAX) {
            max_sum_mod = max(max_sum_mod, (prefix_sum - smallest_greater + m) % m);
        }
    }

    return max_sum_mod;
}

int main() {
    int q;
    scanf("%d", &q);

    while (q--) {
        int n;
        long m;
        scanf("%d %ld", &n, &m);

        long a[n];
        for (int i = 0; i < n; i++) {
            scanf("%ld", &a[i]);
        }

        long result = maximumSum(n, a, m);
        printf("%ld\n", result);
    }

    return 0;
}
