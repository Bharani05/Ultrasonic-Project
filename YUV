To efficiently extract each frame from a raw YUV file with 12-bit depth and convert it to 10-bit depth using C, you can follow these steps:

1. Read the raw YUV file into memory.
2. Parse the YUV data, extracting each frame.
3. Convert the pixel values from 12-bit to 10-bit depth.
4. Write the modified frames to a new YUV file.

Here's a basic outline of how you can implement this in C:

```c
#include <stdio.h>
#include <stdlib.h>

#define FRAME_WIDTH  // define your frame width
#define FRAME_HEIGHT // define your frame height
#define BITS_PER_PIXEL 12 // bits per pixel in the input file
#define OUTPUT_BITS_PER_PIXEL 10 // bits per pixel in the output file

void convert12to10(const unsigned char *in, unsigned char *out, int size) {
    // Convert 12-bit to 10-bit depth
    for (int i = 0; i < size; i += 3) {
        unsigned short val = (in[i] << 4) | (in[i + 1] >> 4);
        out[i * 5 / 6] = (val >> 2) & 0xFF;
        out[i * 5 / 6 + 1] = ((val & 0x3) << 6) | (in[i + 1] & 0x3F);
    }
}

int main() {
    FILE *inputFile = fopen("input.yuv", "rb");
    FILE *outputFile = fopen("output.yuv", "wb");
    if (inputFile == NULL || outputFile == NULL) {
        printf("Error opening files.\n");
        return 1;
    }

    unsigned char *buffer12 = (unsigned char *)malloc(FRAME_WIDTH * FRAME_HEIGHT * 3); // Assuming 4:2:0 format
    unsigned char *buffer10 = (unsigned char *)malloc(FRAME_WIDTH * FRAME_HEIGHT * 3 * 5 / 6); // Buffer for 10-bit output

    int frameSize = FRAME_WIDTH * FRAME_HEIGHT * 3;

    while (fread(buffer12, 1, frameSize, inputFile) == frameSize) {
        convert12to10(buffer12, buffer10, frameSize);
        fwrite(buffer10, 1, frameSize * 5 / 6, outputFile);
    }

    free(buffer12);
    free(buffer10);
    fclose(inputFile);
    fclose(outputFile);

    return 0;
}
```

Please note that this is a basic example and may need adjustments based on your specific requirements and the exact format of your YUV file. Additionally, you'll need to define the frame width and height based on your YUV format.


// extract a file
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FRAME_WIDTH 1920 // Adjust according to your frame size
#define FRAME_HEIGHT 1080 // Adjust according to your frame size
#define BITS_PER_PIXEL 12

void extractFrames(const char *inputFilename) {
    FILE *inputFile = fopen(inputFilename, "rb");
    if (inputFile == NULL) {
        printf("Error opening input file.\n");
        return;
    }

    // Calculate frame size
    int frameSize = FRAME_WIDTH * FRAME_HEIGHT * 3 / 2; // Assuming 4:2:0 format
    if (frameSize <= 0) {
        printf("Invalid frame size.\n");
        fclose(inputFile);
        return;
    }

    unsigned char *frameData = (unsigned char *)malloc(frameSize);
    if (frameData == NULL) {
        printf("Memory allocation failed.\n");
        fclose(inputFile);
        return;
    }

    int frameCount = 0;
    while (fread(frameData, 1, frameSize, inputFile) == frameSize) {
        char outputFilename[50]; // Adjust buffer size accordingly
        sprintf(outputFilename, "frame_%d.yuv", frameCount);

        FILE *outputFile = fopen(outputFilename, "wb");
        if (outputFile == NULL) {
            printf("Error creating output file.\n");
            free(frameData);
            fclose(inputFile);
            return;
        }

        fwrite(frameData, 1, frameSize, outputFile);
        fclose(outputFile);
        frameCount++;
    }

    free(frameData);
    fclose(inputFile);
}

int main() {
    const char *inputFilename = "input.yuv"; // Replace with your input file name
    extractFrames(inputFilename);
    return 0;
}


///extract a file 12bpp

#include <stdio.h>
#include <stdlib.h>

#define FRAME_WIDTH 1920 // Adjust according to your frame size
#define FRAME_HEIGHT 1080 // Adjust according to your frame size
#define BITS_PER_PIXEL 12

void extractFrames(const char *inputFilename) {
    FILE *inputFile = fopen(inputFilename, "rb");
    if (inputFile == NULL) {
        printf("Error opening input file.\n");
        return;
    }

    int frameSize = FRAME_WIDTH * FRAME_HEIGHT * 3 / 2; // Assuming 4:2:0 format
    unsigned char *frameData = (unsigned char *)malloc(frameSize);
    if (frameData == NULL) {
        printf("Memory allocation failed.\n");
        fclose(inputFile);
        return;
    }

    int frameCount = 0;
    while (fread(frameData, 1, frameSize, inputFile) == frameSize) {
        char outputFilename[50]; // Adjust buffer size accordingly
        sprintf(outputFilename, "frame_%d.yuv", frameCount);

        FILE *outputFile = fopen(outputFilename, "wb");
        if (outputFile == NULL) {
            printf("Error creating output file.\n");
            free(frameData);
            fclose(inputFile);
            return;
        }

        fwrite(frameData, 1, frameSize, outputFile);
        fclose(outputFile);
        frameCount++;
    }

    free(frameData);
    fclose(inputFile);
}

int main() {
    const char *inputFilename = "input.yuv"; // Replace with your input file name
    extractFrames(inputFilename);
    return 0;
}

// bharani

#include <stdio.h>
#include<stdint.h>


int main()
{
	FILE *fp;
	
	char c;
	size_t SIZE=8294400;
	fp = fopen ("5052_1920x1080_UYVY_12b (1).yuv", "rb");
	
	if(fp == NULL){
		printf("Error openning \n");
		return 1;
	}
	
	char input[]="1920x1080_UYVY_12b_frame_1.yuv";
	FILE *output=fopen(input,"wb");

	size_t temp=0;

	while(temp<SIZE)
		{
		c=fgetc(fp);
		fputc(c,output);
		temp++;
		}

	fclose(fp);
	fclose(output);
	return 1;
}
