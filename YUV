To efficiently extract each frame from a raw YUV file with 12-bit depth and convert it to 10-bit depth using C, you can follow these steps:

1. Read the raw YUV file into memory.
2. Parse the YUV data, extracting each frame.
3. Convert the pixel values from 12-bit to 10-bit depth.
4. Write the modified frames to a new YUV file.

Here's a basic outline of how you can implement this in C:

```c
#include <stdio.h>
#include <stdlib.h>

#define FRAME_WIDTH  // define your frame width
#define FRAME_HEIGHT // define your frame height
#define BITS_PER_PIXEL 12 // bits per pixel in the input file
#define OUTPUT_BITS_PER_PIXEL 10 // bits per pixel in the output file

void convert12to10(const unsigned char *in, unsigned char *out, int size) {
    // Convert 12-bit to 10-bit depth
    for (int i = 0; i < size; i += 3) {
        unsigned short val = (in[i] << 4) | (in[i + 1] >> 4);
        out[i * 5 / 6] = (val >> 2) & 0xFF;
        out[i * 5 / 6 + 1] = ((val & 0x3) << 6) | (in[i + 1] & 0x3F);
    }
}

int main() {
    FILE *inputFile = fopen("input.yuv", "rb");
    FILE *outputFile = fopen("output.yuv", "wb");
    if (inputFile == NULL || outputFile == NULL) {
        printf("Error opening files.\n");
        return 1;
    }

    unsigned char *buffer12 = (unsigned char *)malloc(FRAME_WIDTH * FRAME_HEIGHT * 3); // Assuming 4:2:0 format
    unsigned char *buffer10 = (unsigned char *)malloc(FRAME_WIDTH * FRAME_HEIGHT * 3 * 5 / 6); // Buffer for 10-bit output

    int frameSize = FRAME_WIDTH * FRAME_HEIGHT * 3;

    while (fread(buffer12, 1, frameSize, inputFile) == frameSize) {
        convert12to10(buffer12, buffer10, frameSize);
        fwrite(buffer10, 1, frameSize * 5 / 6, outputFile);
    }

    free(buffer12);
    free(buffer10);
    fclose(inputFile);
    fclose(outputFile);

    return 0;
}
```

Please note that this is a basic example and may need adjustments based on your specific requirements and the exact format of your YUV file. Additionally, you'll need to define the frame width and height based on your YUV format.


// extract a file
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FRAME_WIDTH 1920 // Adjust according to your frame size
#define FRAME_HEIGHT 1080 // Adjust according to your frame size
#define BITS_PER_PIXEL 12

void extractFrames(const char *inputFilename) {
    FILE *inputFile = fopen(inputFilename, "rb");
    if (inputFile == NULL) {
        printf("Error opening input file.\n");
        return;
    }

    // Calculate frame size
    int frameSize = FRAME_WIDTH * FRAME_HEIGHT * 3 / 2; // Assuming 4:2:0 format
    if (frameSize <= 0) {
        printf("Invalid frame size.\n");
        fclose(inputFile);
        return;
    }

    unsigned char *frameData = (unsigned char *)malloc(frameSize);
    if (frameData == NULL) {
        printf("Memory allocation failed.\n");
        fclose(inputFile);
        return;
    }

    int frameCount = 0;
    while (fread(frameData, 1, frameSize, inputFile) == frameSize) {
        char outputFilename[50]; // Adjust buffer size accordingly
        sprintf(outputFilename, "frame_%d.yuv", frameCount);

        FILE *outputFile = fopen(outputFilename, "wb");
        if (outputFile == NULL) {
            printf("Error creating output file.\n");
            free(frameData);
            fclose(inputFile);
            return;
        }

        fwrite(frameData, 1, frameSize, outputFile);
        fclose(outputFile);
        frameCount++;
    }

    free(frameData);
    fclose(inputFile);
}

int main() {
    const char *inputFilename = "input.yuv"; // Replace with your input file name
    extractFrames(inputFilename);
    return 0;
}


///extract a file 12bpp

#include <stdio.h>
#include <stdlib.h>

#define FRAME_WIDTH 1920 // Adjust according to your frame size
#define FRAME_HEIGHT 1080 // Adjust according to your frame size
#define BITS_PER_PIXEL 12

void extractFrames(const char *inputFilename) {
    FILE *inputFile = fopen(inputFilename, "rb");
    if (inputFile == NULL) {
        printf("Error opening input file.\n");
        return;
    }

    int frameSize = FRAME_WIDTH * FRAME_HEIGHT * 3 / 2; // Assuming 4:2:0 format
    unsigned char *frameData = (unsigned char *)malloc(frameSize);
    if (frameData == NULL) {
        printf("Memory allocation failed.\n");
        fclose(inputFile);
        return;
    }

    int frameCount = 0;
    while (fread(frameData, 1, frameSize, inputFile) == frameSize) {
        char outputFilename[50]; // Adjust buffer size accordingly
        sprintf(outputFilename, "frame_%d.yuv", frameCount);

        FILE *outputFile = fopen(outputFilename, "wb");
        if (outputFile == NULL) {
            printf("Error creating output file.\n");
            free(frameData);
            fclose(inputFile);
            return;
        }

        fwrite(frameData, 1, frameSize, outputFile);
        fclose(outputFile);
        frameCount++;
    }

    free(frameData);
    fclose(inputFile);
}

int main() {
    const char *inputFilename = "input.yuv"; // Replace with your input file name
    extractFrames(inputFilename);
    return 0;
}

// bharani

#include <stdio.h>
#include<stdint.h>


int main()
{
	FILE *fp;
	
	char c;
	size_t SIZE=8294400;
	fp = fopen ("5052_1920x1080_UYVY_12b (1).yuv", "rb");
	
	if(fp == NULL){
		printf("Error openning \n");
		return 1;
	}
	
	char input[]="1920x1080_UYVY_12b_frame_1.yuv";
	FILE *output=fopen(input,"wb");

	size_t temp=0;

	while(temp<SIZE)
		{
		c=fgetc(fp);
		fputc(c,output);
		temp++;
		}

	fclose(fp);
	fclose(output);
	return 1;
}

// bh

#include <stdio.h>
#include <stdint.h>

int main()
{
    // Array of input file names
    char *input_files[] = {
        "1920x1080_UYVY_12b_frame_1.yuv",
        "1920x1080_UYVY_12b_frame_2.yuv",
        // Add more file names here as needed
    };

    // Total number of files
    int num_files = sizeof(input_files) / sizeof(input_files[0]);

    // Open each input file, extract data, and write to output files
    for (int i = 0; i < num_files; i++)
    {
        FILE *fp;
        FILE *output;

        // Open input file for reading
        fp = fopen(input_files[i], "rb");
        if (fp == NULL)
        {
            printf("Error opening input file: %s\n", input_files[i]);
            return 1;
        }

        // Open output file for writing
        output = fopen(input_files[i], "wb");
        if (output == NULL)
        {
            printf("Error creating output file: %s\n", input_files[i]);
            fclose(fp); // Close input file before exiting
            return 1;
        }

        // Extract data from input file and write to output file
        int c;
        while ((c = fgetc(fp)) != EOF)
        {
            fputc(c, output);
        }

        // Close files after extraction
        fclose(fp);
        fclose(output);

        printf("File extracted: %s\n", input_files[i]);
    }

    return 0;
}
// pixel:
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#define TF 46
#define TF_SIZE 381542400

int main()
{
	FILE *fp=fopen("5052_1920x1080_UYVY_12b (1).yuv","rb");
	printf("1");
	size_t Fsize=TF_SIZE/TF;
	for(int i=0; i<TF; i++)
		{
			char output_file[256];
			sprintf(output_file,"1920x1080_UYVY_10bframe_%d.yuv",i+1);
			FILE *frame=fopen(output_file,"wb");
			if(frame == NULL)
				{
					printf("Error");
					fclose(frame);
					return 1;
				}
			size_t TP=Fsize/6;
			size_t length=Fsize*8;
			size_t FOsize=(length/12)*10;

			char *input=malloc(Fsize*sizeof(char));
			char *output=malloc((FOsize/8)*sizeof(char));

			fread(input,sizeof(char),Fsize,fp);

			size_t input_index=0;
			size_t output_index=0;
			for(size_t i=0;i<TP;i++)
				{
					uint32_t pixel_a=0;
					for(int j=0;j<2;j++)
						{
							pixel_a=pixel_a|(uint8_t)input[input_index++]<<(8*j);
						}
					for(int k=0;k<4;k++)
						{
							uint32_t twelve_bits=pixel_a >> (10*k)&0x3FF;
	
							output[output_index++]=(char)(twelve_bits>>2);
						
						}
				}
			fwrite(output, sizeof(char), FOsize, frame);

			fclose(frame);
		}
	fclose(fp);
	return 0;
}

//pixel 2


#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define TF 46
#define TF_SIZE 381542400

int main()
{
    FILE *fp = fopen("5052_1920x1080_UYVY_12b (1).yuv", "rb");
    if (fp == NULL)
    {
        printf("Error opening input file.\n");
        return 1;
    }

    size_t Fsize = TF_SIZE / TF;
    for (int i = 0; i < TF; i++)
    {
        char output_file[256];
        sprintf(output_file, "1920x1080_UYVY_10bframe_%d.yuv", i + 1);
        FILE *frame = fopen(output_file, "wb");
        if (frame == NULL)
        {
            printf("Error creating output file %s\n", output_file);
            fclose(fp);
            return 1;
        }

        size_t TP = Fsize / 6;
        size_t FOsize = (Fsize / 12) * 10;

        char *input = malloc(Fsize * sizeof(char));
        char *output = malloc(FOsize * sizeof(char));

        fread(input, sizeof(char), Fsize, fp);

        size_t input_index = 0;
        size_t output_index = 0;
        for (size_t i = 0; i < TP; i++)
        {
            uint32_t pixel_a = 0;
            for (int j = 0; j < 2; j++) // Only need 2 bytes (12 bits) per pixel
            {
                pixel_a |= (uint32_t)input[input_index++] << (8 * j);
            }
            for (int k = 0; k < 4; k++)
            {
                uint32_t ten_bits = (pixel_a >> (10 * k)) & 0x3FF; // Extract 10 bits
                output[output_index++] = (char)(ten_bits >> 2);    // Store the 8 most significant bits
            }
        }
        fwrite(output, sizeof(char), FOsize, frame);

        fclose(frame);
    }
    fclose(fp);
    return 0;
}		

//yuv_4k.c


#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define FRAME_WIDTH 3840 
#define FRAME_HEIGHT 2160 
#define BITS_PER_PIXEL 2
#define FILE_NAME 256


void extractFrames(FILE *fp) {
   

    int frameSize = (((FRAME_WIDTH * FRAME_HEIGHT) * BITS_PER_PIXEL) * 2);
    uint32_t TP = frameSize/2;
	//printf("%d ",frameSize);
    unsigned char *frameData = (unsigned char *)malloc(frameSize);
    uint16_t *output = (uint16_t*)malloc(frameSize);
    
    int frameCount = 0;
    while (fread(frameData,sizeof(unsigned char) , frameSize, fp)) 
    {
        char outputFilename[FILE_NAME];
        sprintf(outputFilename, "3840x2160_UYVY_10b_frame_%d.yuv", frameCount);

        FILE *outputFile = fopen(outputFilename, "wb");
        if (outputFile == NULL) {
            printf("Error creating output file.\n");
            free(frameData);
            fclose(fp);
            return;
        }
        uint32_t input_index=0;
        uint32_t output_index=0;
        for (size_t k=0; k < TP; k++)
    		{
    			uint16_t pixel_a = 0;
    			for (int j = 0; j < 2; j++)
    			{
    				pixel_a = pixel_a | ((uint16_t)frameData[input_index++] << (8 * j));
    			}
    
    			uint16_t ten_bits = (pixel_a >> 2);
    			output[output_index++] = ten_bits;
    		}
    		fwrite(output, sizeof(uint16_t), frameSize/2, outputFile);
            fclose(outputFile);
            frameCount++;
    }

    free(frameData);
}

int main() {
    
    FILE *inputFile = fopen("5034_Artglass_3840x2160_UYVY_12b.yuv", "rb");
    if (inputFile == NULL) {
        printf("Error opening input file.\n");
        return 0;
    }
    extractFrames(inputFile);
    fclose(inputFile);
    return 0;
}
// extract.c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define FRAME_WIDTH 1920
#define FRAME_HEIGHT 1080
#define BIT_DEPTH 2
#define FILE_NAME 50


int main(){
        int ret = 0;

        FILE *fp = fopen("5330_TestSet_BL_decoder_out_1920x1080_420_10b.yuv", "rb");
        if (fp == NULL) {
                printf("Error opening input file.\n");
                        return 0;
        }


                int frameSize = (((FRAME_WIDTH * FRAME_HEIGHT) * BIT_DEPTH) * 1.5);



                uint8_t *output = (uint8_t *) calloc(frameSize, sizeof(uint8_t));

                int frameCount = 0;
                fseek (fp, 0, SEEK_END);
                //printf("%ld ", ftell(fp));

                int i;
                int vals=ftell(fp);
                printf("%d ",vals);
                int val = (vals/frameSize);
                printf("%d ",val);
                rewind(fp);



                for(i=0; i < val; i++){
                fread(output,  frameSize,1, fp);
                char outputFilename[FILE_NAME];
                sprintf(outputFilename,  "1920x1080_420_10b_(%d).yuv", frameCount);

                FILE *outputFile = fopen(outputFilename, "wb");
                if (outputFile == NULL){
                        printf("Error Openning OutputFile");

                        return 1;
                }
                fwrite(output,  frameSize,1, outputFile);
                fclose(outputFile);
                frameCount++;

                }
                free(output);
}

// ASS_3.1
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define WIDTH 1920
#define HEIGHT 1080
#define BIT_DEPTH 2
#define FILE_NAME 256

int main()
{
    size_t F_SIZE = (((WIDTH*HEIGHT)*BIT_DEPTH)*2);
	int TF=46;
	size_t TF_SIZE = F_SIZE*TF;

	
	FILE *fp=fopen("5052_1920x1080_UYVY_12b (1).yuv","rb");
	
	for(int i=0; i<TF; i++)
	{
		char output_file[FILE_NAME];
		sprintf(output_file,"1920x1080_UYVY_10bframe_(%d).yuv",i+1);
		FILE *frame=fopen(output_file,"wb");
		if(frame == NULL)
			{
				printf("Error");
				fclose(frame);
				return 1;
			}
		size_t TP=F_SIZE/2;
		uint8_t *input = malloc(F_SIZE*sizeof(uint8_t));
// 		if (NULL == input) {
// 			printf("Error Input Memmory Allocation");
// 		}

		uint16_t *output = malloc(F_SIZE*sizeof(uint16_t));
// 		if (output == NULL) {
// 			printf("Error Output Memmory Allocation");
// 			}

		fread(input,sizeof(uint8_t),F_SIZE,fp);

		size_t input_index=0;
		size_t output_index=0;
		size_t pixels = (TP / 2);
		uint16_t pixel_a = 0;
		int j = 0;
		uint16_t ten_bits = 0;

		for (size_t k=0; k < pixels; k++) {
			pixel_a = 0;
			for (j = 0; j < 2; j++) {
				pixel_a = pixel_a | ((uint16_t)input[input_index++] << (8 * j));
			}

			ten_bits = (pixel_a >> 2) & 0xFFF;
			output[output_index++] = ten_bits;
		}

		
		fwrite(output, sizeof(uint16_t), F_SIZE, frame);
		
		
	}
	
	
	fclose(fp);
	return 0;
}
// ASS_5
This assignment is little bit difficult.

I am sharing a YUV422 10 bit semi planar YUV data  without padding.(continous pixel data is stored.)

U need to convert each YUV file to YUV422 10 bit interleaved padded data.

Chroma_Offset	= 2592768 (Starting offset fro UV data)
Each Row Offset     =  1920

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define FRAME_WIDTH 1920
#define FRAME_HEIGHT 1080
#define BIT_DEPTH 1.25


int main()
{
        FILE *fp=fopen("1.raw","rb");
        if(fp == NULL){
                printf("Error opening inputfile");
                return 1;
        }
        size_t F_SIZE = (((FRAME_WIDTH * FRAME_HEIGHT) * BIT_DEPTH) * 2);
        printf("%ld ",F_SIZE);

        uint8_t *output = (uint8_t *) calloc(F_SIZE, sizeof(uint8_t));
        fseek(fp, 0 ,SEEK_END);
        printf("%ld ", ftell(fp));




}
// edited

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define FRAME_WIDTH 1920
#define FRAME_HEIGHT 1080
#define BIT_DEPTH 1.25

int main() {
    FILE *fp = fopen("1.raw", "rb");
    if (fp == NULL) {
        printf("Error opening input file");
        return 1;
    }

    // Calculate the expected size of each frame based on width, height, and bit depth
    size_t frame_size = ((size_t)(FRAME_WIDTH * FRAME_HEIGHT) * BIT_DEPTH / 8) * 2;

    // Get the total size of the file
    fseek(fp, 0, SEEK_END);
    size_t total_size = ftell(fp);
    fseek(fp, 0, SEEK_SET);  // Reset file pointer to the beginning

    // Allocate memory to store the original data
    uint8_t *original_data = (uint8_t *)malloc(total_size);
    if (original_data == NULL) {
        printf("Error allocating memory");
        fclose(fp);
        return 1;
    }

    // Read the contents of the file into memory
    size_t bytes_read = fread(original_data, 1, total_size, fp);
    if (bytes_read != total_size) {
        printf("Error reading file");
        fclose(fp);
        free(original_data);
        return 1;
    }

    // Process the data and extract valid frames (you'll need to implement this part)
    // You'll likely need to iterate through the data, looking for patterns that indicate valid frames

    // Example: Save the extracted valid frames to a new file
    FILE *output_fp = fopen("extracted_frames.raw", "wb");
    if (output_fp == NULL) {
        printf("Error opening output file");
        fclose(fp);
        free(original_data);
        return 1;
    }
    fwrite(original_data, 1, total_size, output_fp);

    // Clean up
    fclose(fp);
    fclose(output_fp);
    free(original_data);

    return 0;
}
// edited file
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define FRAME_WIDTH 1920
#define FRAME_HEIGHT 1080
#define BIT_DEPTH 1.25

int main() {
    FILE *input_fp = fopen("1.raw", "rb");
    if (input_fp == NULL) {
        printf("Error opening input file");
        return 1;
    }

    // Calculate the size of each frame based on width, height, and bit depth
    size_t frame_size = (size_t)(FRAME_WIDTH * FRAME_HEIGHT * BIT_DEPTH / 8) * 2;

    // Allocate memory to store the original data
    uint8_t *original_data = (uint8_t *)malloc(frame_size);
    if (original_data == NULL) {
        printf("Error allocating memory");
        fclose(input_fp);
        return 1;
    }

    // Read the first frame from the raw file
    size_t bytes_read = fread(original_data, 1, frame_size, input_fp);
    if (bytes_read != frame_size) {
        printf("Error reading file");
        fclose(input_fp);
        free(original_data);
        return 1;
    }

    // Close the input file
    fclose(input_fp);

    // Calculate the size of each component
    size_t size_Y = (size_t)(FRAME_WIDTH * FRAME_HEIGHT * BIT_DEPTH / 8);
    size_t size_UV = size_Y / 2;

    // Allocate memory for Y, U, V components
    uint8_t *Y_component = (uint8_t *)malloc(size_Y);
    uint8_t *UV_component = (uint8_t *)malloc(size_UV);
    if (Y_component == NULL || UV_component == NULL) {
        printf("Error allocating memory");
        free(original_data);
        return 1;
    }

    // Extract Y component
    memcpy(Y_component, original_data, size_Y);

    // Extract UV component (U and V interleaved)
    uint8_t *source_uv = original_data + size_Y;
    for (size_t i = 0; i < size_UV; i++) {
        UV_component[i] = source_uv[i * 2];
    }

    // Save Y component to file
    FILE *Y_fp = fopen("Y_component.raw", "wb");
    if (Y_fp == NULL) {
        printf("Error opening output file for Y component");
        free(original_data);
        free(Y_component);
        free(UV_component);
        return 1;
    }
    fwrite(Y_component, 1, size_Y, Y_fp);
    fclose(Y_fp);

    // Save UV component to file
    FILE *UV_fp = fopen("UV_component.raw", "wb");
    if (UV_fp == NULL) {
        printf("Error opening output file for UV component");
        free(original_data);
        free(Y_component);
        free(UV_component);
        return 1;
    }
    fwrite(UV_component, 1, size_UV, UV_fp);
    fclose(UV_fp);

    // Clean up
    free(original_data);
    free(Y_component);
    free(UV_component);

    return 0;
}
//makefile
obj-m = helloworld.o
all:
        make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules
clean:
        make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean

This appears to be a simple Makefile for building a kernel module named `helloworld.o`. Let's break down each line and understand its purpose:

1. `obj-m = helloworld.o`: This line defines the target module that will be built. In this case, it specifies that the kernel module named `helloworld.o` will be built.

2. `all:`: This is a target label, indicating the target named `all`. Targets in Makefiles represent output files or actions to be taken. The `all` target is typically used as a default target that builds everything specified in the Makefile.

3. `make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules`: This is the command to build the kernel module. It invokes the `make` utility with the following options:
   - `-C /lib/modules/$(shell uname -r)/build/`: Specifies the directory where the kernel's build system resides. This is typically the kernel source directory or a symbolic link to it.
   - `M=$(PWD)`: Sets the value of the `M` variable to the current working directory (`$(PWD)`). This tells the kernel build system where the external module source code is located.
   - `modules`: Indicates that only the modules (kernel modules) should be built. This ensures that only the specified module (`helloworld.o`) is built.

4. `clean:`: This is another target label, indicating the target named `clean`. The `clean` target typically performs cleanup operations to remove any generated files or artifacts.

5. `make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean`: This is the command to clean the build artifacts. It invokes the `make` utility with the following options:
   - `-C /lib/modules/$(shell uname -r)/build`: Specifies the directory where the kernel's build system resides, similar to the build command.
   - `M=$(PWD)`: Sets the value of the `M` variable to the current working directory, similar to the build command.
   - `clean`: Indicates that the clean operation should be performed, removing any generated files or artifacts.

Overall, this Makefile is used to build a kernel module named `helloworld.o` using the kernel's build system, and it provides targets for building the module (`all`) and cleaning up (`clean`).
			
// ASS_5
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define FRAME_WIDTH 1920
#define FRAME_HEIGHT 1080
#define BIT_DEPTH 1.25
#define SAMPLES 2
#define FILE_NAME 256
#define NEW_BIT_DEPTH 2
#define UV_OFFSET 2592768
#define ROW_OFFSET 2400


int main()
{
	FILE *fp=fopen("1.raw","rb");

	fseek(fp, 0, SEEK_END);
        uint32_t FILE_SIZE = ftell(fp);
        rewind(fp);

	uint32_t NEW_FILE_SIZE = (((FRAME_WIDTH * FRAME_HEIGHT) * NEW_BIT_DEPTH) * SAMPLES);
        

	char output_file[FILE_NAME] = "1.yuv";

	FILE *frame1 = fopen(output_file,"wb");
	
	
	uint8_t *input = calloc(FILE_SIZE, sizeof(uint8_t));

	fread(input, sizeof(uint8_t),FILE_SIZE,fp);

	uint8_t *input0 = input;
	uint8_t *input1 = input;
	uint8_t *output = input0;
	input1 = input1 + UV_OFFSET;
	uint8_t *output_1 = input1;

	uint16_t buffer[NEW_FILE_SIZE / 2];
	uint32_t row_index = 0, index = 0, col_index = 0;

	while(col_index<FRAME_HEIGHT){
		row_index = 0;
		while(row_index < (FRAME_WIDTH * BIT_DEPTH)){
			buffer[index] = ((((*output_1) << 8) | (*(output_1 + 1))) & 0XFFC0) >> 6;
			buffer[index + 1] = ((((*output) << 8) | (*(output + 1))) & 0XFFC0) >> 6;
			buffer[index + 2] = ((((*(output_1 + 1) << 8) | (*(output_1 + 2))) << 2) & 0XFFC0) >> 6;
			buffer[index + 3] = ((((*(output + 1) << 8) | (*(output + 2))) << 2)& 0XFFC0) >> 6;
			buffer[index + 4] = ((((*(output_1 + 2) << 8) | (*(output_1 + 3))) << 4) & 0XFFC0) >> 6;
			buffer[index + 5] = ((((*(output + 2) << 8) | (*(output + 3))) << 4) & 0XFFC0) >> 6;
			buffer[index + 6] = ((((*(output_1 + 3) << 8) | (*(output_1 + 4))) << 6) & 0XFFC0) >> 6;
			buffer[index + 7] = ((((*(output + 3) << 8) | (*(output + 4))) << 6) & 0XFFC0) >> 6;

			row_index = row_index + 5;
			index = index + 8;
			output = output + 5;
			output_1 = output_1 + 5;

			if(row_index == (FRAME_WIDTH * BIT_DEPTH)){
					output = input0 + ROW_OFFSET;
					input = input0 + ROW_OFFSET;

					output_1 = input1 + ROW_OFFSET;
					input1 = input1 + ROW_OFFSET;
			}
		}
		col_index++;
	}
	fwrite(buffer, sizeof(uint16_t), NEW_FILE_SIZE / 2, frame1);
	free(input);
	fclose(frame1);
	fclose(fp);

	return 0;
}

//.am file

# Makefile.am

# Name of the final executable
bin_PROGRAMS = my_program

# List of source files
my_program_SOURCES = main.c add.c hello.c

# Compiler flags
AM_CFLAGS = -Wall

# Linker flags
my_program_LDADD = -lm
