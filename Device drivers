/***************************************************************************//**
*  \file       driver.c
*
*  \details    Simple Linux device driver (File Operations)
*
*  \author     EmbeTronicX
*
*  \Tested with Linux raspberrypi 5.10.27-v7l-embetronicx-custom+
*
*******************************************************************************/
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kdev_t.h>
#include <linux/fs.h>
#include <linux/err.h>
#include <linux/cdev.h>
#include <linux/device.h>

dev_t dev = 0;
static struct class *dev_class;
static struct cdev etx_cdev;

/*
** Function Prototypes
*/
static int      __init etx_driver_init(void);
static void     __exit etx_driver_exit(void);
static int      etx_open(struct inode *inode, struct file *file);
static int      etx_release(struct inode *inode, struct file *file);
static ssize_t  etx_read(struct file *filp, char __user *buf, size_t len,loff_t * off);
static ssize_t  etx_write(struct file *filp, const char *buf, size_t len, loff_t * off);

static struct file_operations fops =
{
    .owner      = THIS_MODULE,
    .read       = etx_read,
    .write      = etx_write,
    .open       = etx_open,
    .release    = etx_release,
};

/*
** This function will be called when we open the Device file
*/
static int etx_open(struct inode *inode, struct file *file)
{
        pr_info("Driver Open Function Called...!!!\n");
        return 0;
}

/*
** This function will be called when we close the Device file
*/
static int etx_release(struct inode *inode, struct file *file)
{
        pr_info("Driver Release Function Called...!!!\n");
        return 0;
}

/*
** This function will be called when we read the Device file
*/
static ssize_t etx_read(struct file *filp, char __user *buf, size_t len, loff_t *off)
{
        pr_info("Driver Read Function Called...!!!\n");
        return 0;
}

/*
** This function will be called when we write the Device file
*/
static ssize_t etx_write(struct file *filp, const char __user *buf, size_t len, loff_t *off)
{
        pr_info("Driver Write Function Called...!!!\n");
        return len;
}

/*
** Module Init function
*/
static int __init etx_driver_init(void)
{
        /*Allocating Major number*/
        if((alloc_chrdev_region(&dev, 0, 1, "etx_Dev")) <0){
                pr_err("Cannot allocate major number\n");
                return -1;
        }
        pr_info("Major = %d Minor = %d \n",MAJOR(dev), MINOR(dev));

        /*Creating cdev structure*/
        cdev_init(&etx_cdev,&fops);

        /*Adding character device to the system*/
        if((cdev_add(&etx_cdev,dev,1)) < 0){
            pr_err("Cannot add the device to the system\n");
            goto r_class;
        }

        /*Creating struct class*/
        if(IS_ERR(dev_class = class_create(THIS_MODULE,"etx_class"))){
            pr_err("Cannot create the struct class\n");
            goto r_class;
        }

        /*Creating device*/
        if(IS_ERR(device_create(dev_class,NULL,dev,NULL,"etx_device"))){
            pr_err("Cannot create the Device 1\n");
            goto r_device;
        }
        pr_info("Device Driver Insert...Done!!!\n");
      return 0;

r_device:
        class_destroy(dev_class);
r_class:
        unregister_chrdev_region(dev,1);
        return -1;
}

/*
** Module exit function
*/
static void __exit etx_driver_exit(void)
{
        device_destroy(dev_class,dev);
        class_destroy(dev_class);
        cdev_del(&etx_cdev);
        unregister_chrdev_region(dev, 1);
        pr_info("Device Driver Remove...Done!!!\n");
}

module_init(etx_driver_init);
module_exit(etx_driver_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("EmbeTronicX <embetronicx@gmail.com>");
MODULE_DESCRIPTION("Simple Linux device driver (File Operations)");
MODULE_VERSION("1.3");

*****processfile****

#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/proc_fs.h>
#include <asm/uaccess.h>
#define BUFSIZE  100

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Bharani<bhrnbala@gmail.com>");
MODULE_DESCRIPTION("Module creates a folder and file in procfs and implements read and write callbacks");

static struct proc_dir_entry *proc_folder;
static struct proc_dir_entry *proc_file;

static ssize_t my_read(struct file *file,  char *user_buffer,size_t count, loff_t *offs)
{
        char text[] = "Hello from a procfs file\n";
        int to_copy, not_copied, delta;

        to_copy = min(count, sizeof(text));


        not_copied = copy_to_user(text, user_buffer, to_copy);
        printk("procfs_test - You have read %s to me\n",text);

        delta = to_copy - not_copied;

        return delta;
}

static ssize_t my_write(struct file *file,const char *user_buffer,size_t count, loff_t *offs)
{
        char text[255];
        int to_copy, not_copied,delta;

        memset(text, 0, sizeof(text));

        to_copy = min(count, sizeof(text));

        not_copied = copy_from_user(text, user_buffer, to_copy);
        printk("procfs_test - You have written %s to our proc entry\n",text);

        delta = to_copy - not_copied;
        return delta;
}

static struct proc_ops fops =
{
        .proc_read   = my_read,
        .proc_write  = my_write,
};

static int __init my_init(void)
{
        proc_folder = proc_mkdir("bharani", NULL);
        if(proc_folder == NULL)
        {
                printk("procfs_test - Error creating /proc/bharani\n");
                return -ENOMEM;
        }

        proc_file = proc_create("dummy", 0666, proc_folder, &fops);
        if(proc_file == NULL)
        {
                printk("procfs_test - Error crating /proc/bharani/dummy \n");
                proc_remove(proc_folder);
                return -ENOMEM;
        }
        printk("procfs_test - Created /proc/bharani/dummy \n");
        return 0;
}

static void __exit my_exit(void)
{
        printk("procfs_test - Error creating /proc/bharani/dummy\n");
        proc_remove(proc_file);
        proc_remove(proc_folder);
}

module_init(my_init);
module_exit(my_exit);
*****staticwaitqueue*****

#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kdev_t.h>
#include <linux/fs.h>
#include <linux/device.h>
#include <linux/cdev.h>
#include <linux/slab.h>
#include <linux/uaccess.h>
#include <linux/kthread.h>
#include <linux/wait.h>
#include <linux/err.h>

uint32_t read_count = 0;
static struct task_struct *wait_thread;

DECLARE_WAIT_QUEUE_HEAD(wait_queue_etx);

dev_t dev = 0;
static struct class *dev_class;
static struct cdev etx_cdev;
int wait_queue_flag = 0;

static int   __init etx_driver_init(void);
static void  __exit etx_driver_exit(void);

static int etx_open(struct inode *inode, struct file *file);
static int etx_release(struct inode *inode, struct file *file);
static ssize_t etx_read(struct file *filp, char __user *buf, size_t len, loff_t *off);
static ssize_t etx_write(struct file *filp,const char *buf, size_t len, loff_t *off);

static struct file_operations fops =
{
        .owner    = THIS_MODULE,
        .read     = etx_read,
        .write    = etx_write,
        .open     = etx_open,
        .release  = etx_release,
};

static int wait_function (void *unused)
{
        while(1)
        {
                pr_info ("Waiting For Event \n");
                wait_event_interruptible(wait_queue_etx, wait_queue_flag != 0 );
                if(wait_queue_flag == 2)
                {
                        pr_info("Event came from Exit Function \n");
                        return 0;
                }
                pr_info("Event came from Read Function - %d \n", ++read_count);
                wait_queue_flag = 0;
        }
        do_exit(0);
        return 0;
}

static int etx_open(struct inode *inode, struct file *file)
{
        pr_info("Device file opened \n");
        return 0;
}

static int etx_release(struct inode *inode, struct file *file)
{
        pr_info ("Device file closed \n");
        return 0;
}

static ssize_t etx_read(struct file *filp, char __user *buf, size_t len, loff_t *off)
{
        pr_info("Read function \n");
        wait_queue_flag = 1;
        wake_up_interruptible(&wait_queue_etx);
        return 0;
}

static ssize_t etx_write (struct file *filp, const char __user *buf, size_t len, loff_t *off)
{
        pr_info (" Write function \n");
        return len;
}

static int __init etx_driver_init(void)
{
        if(alloc_chrdev_region (&dev, 0, 1, "etx_dev")<0)
        {
                pr_info ("Cannot Allocate a Major Number \n");
                return -1;
        }
        pr_info("Major = %d Minor = %d \n", MAJOR(dev), MINOR(dev));

        cdev_init(&etx_cdev, &fops);
        etx_cdev.owner = THIS_MODULE;
        etx_cdev.ops = &fops;

        if ((cdev_add(&etx_cdev, dev,1))<0)
        {
                pr_info("cannot add the device to the system \n");
                goto r_class;
        }

        if (IS_ERR(dev_class = class_create(THIS_MODULE, "etx_class")))
        {
                pr_info("cannot create the struct class \n");
                goto r_class;
        }
        if(IS_ERR(device_create(dev_class,NULL,dev,NULL, "etx_device")))
        {
                pr_info("cannot create the device \n");
                goto r_device;
        }
        wait_thread  = kthread_create(wait_function,NULL, "wiat thread");
        if (wait_thread)
        {
                pr_info ("Thread created successfully \n");
                wake_up_process(wait_thread);
        }
        else
                pr_info("Device Driver Inserted Done \n");
        return 0;

r_device:
        class_destroy(dev_class);

r_class:
        unregister_chrdev_region(dev,1);
        return -1;
}

static void __exit etx_driver_exit(void)
{
        wait_queue_flag = 2;
        wake_up_interruptible(&wait_queue_etx);
        device_destroy(dev_class,dev);
        class_destroy(dev_class);
        cdev_del(&etx_cdev);
        unregister_chrdev_region(dev,1);
        pr_info("Device Driver Remove Done \n");
}

module_init(etx_driver_init);
module_exit(etx_driver_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Bharani<bhrnbala@gmail.com");
MODULE_DESCRIPTION("Simple linux driver (waitqueue static method)");
MODULE_VERSION("1.7");


